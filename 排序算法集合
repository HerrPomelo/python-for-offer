（一）冒泡法：
逐次从头比较把较大的（较小的放到）放到后面，直到第n个，然后每次排序到上依次排序最后一个数字终止

鸡尾酒法：
冒泡法改进，从头到尾再从尾到头，往返
python 向上取整ceil 向下取整floor 四舍五入round

（二）选择排序：
初始时在序列中找到最小（大）元素，放到序列的起始位置作为已排序序列；然后，再从剩余未排序元素中继续寻找最小（大）元素，
放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
注意选择排序与冒泡排序的区别：冒泡排序通过依次交换相邻两个顺序不合法的元素位置，从而将当前最小（大）元素放到合适的位置；
而选择排序每遍历一次都记住了当前最小（大）元素的位置，最后仅需一次交换操作即可将其放到合适的位置。

（三）插入排序
插入排序的工作原理是，对于每个未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
步骤：
1从第一个元素开始，该元素可以认为已经被排序
2取出下一个元素，在已经排序的元素序列中从后向前扫描
3如果被扫描的元素（已排序）大于新元素，将该元素后移一位
4重复步骤3，直到找到已排序的元素小于或者等于新元素的位置
5将新元素插入到该位置后
6重复步骤2~5
range([start,] stop[, step])
range(1,5)就是从1到5但不包括5，输出 [1,2,3,4]
range(1,5,2)是每一跳为2，输出[1,3]
range(1,1)就是从1到1但不包括1，所以输出是[]
range(1,1,1) 就是从1到1但不包括1，每一跳为1，输出当然也是[]
二分法：
针对有序序列，首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；
否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，
则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。 

(四)希尔排序
将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。
将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。
